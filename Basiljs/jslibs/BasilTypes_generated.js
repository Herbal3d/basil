// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var org = org || {};

/**
 * @const
 * @namespace
 */
org.herbal3d = org.herbal3d || {};

/**
 * @const
 * @namespace
 */
org.herbal3d.protocol = org.herbal3d.protocol || {};

/**
 * @const
 * @namespace
 */
org.herbal3d.protocol.basil = org.herbal3d.protocol.basil || {};

/**
 * @enum
 */
org.herbal3d.protocol.basil.coordSystem = {
  WGS86: 1,
  CAMERA: 2,
  CAMERAABS: 3,
  VIRTUAL: 4,
  MOON: 5,
  MARS: 6,
  REL1: 7,
  REL2: 8,
  REL3: 9
};

/**
 * @enum
 */
org.herbal3d.protocol.basil.rotationSystem = {
  WORLD: 1,
  FOR: 2,
  CAMERA: 3
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.Vector3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.Vector3}
 */
org.herbal3d.protocol.basil.Vector3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.Vector3.prototype.X = function() {
  return this.bb.readFloat64(this.bb_pos);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.Vector3.prototype.Y = function() {
  return this.bb.readFloat64(this.bb_pos + 8);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.Vector3.prototype.Z = function() {
  return this.bb.readFloat64(this.bb_pos + 16);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} X
 * @param {number} Y
 * @param {number} Z
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.Vector3.createVector3 = function(builder, X, Y, Z) {
  builder.prep(8, 24);
  builder.writeFloat64(Z);
  builder.writeFloat64(Y);
  builder.writeFloat64(X);
  return builder.offset();
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.Quaternion = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.Quaternion}
 */
org.herbal3d.protocol.basil.Quaternion.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.Quaternion.prototype.X = function() {
  return this.bb.readFloat64(this.bb_pos);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.Quaternion.prototype.Y = function() {
  return this.bb.readFloat64(this.bb_pos + 8);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.Quaternion.prototype.Z = function() {
  return this.bb.readFloat64(this.bb_pos + 16);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.Quaternion.prototype.W = function() {
  return this.bb.readFloat64(this.bb_pos + 24);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} X
 * @param {number} Y
 * @param {number} Z
 * @param {number} W
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.Quaternion.createQuaternion = function(builder, X, Y, Z, W) {
  builder.prep(8, 32);
  builder.writeFloat64(W);
  builder.writeFloat64(Z);
  builder.writeFloat64(Y);
  builder.writeFloat64(X);
  return builder.offset();
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.Transform = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.Transform}
 */
org.herbal3d.protocol.basil.Transform.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.Transform=} obj
 * @returns {org.herbal3d.protocol.basil.Transform}
 */
org.herbal3d.protocol.basil.Transform.getRootAsTransform = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.Transform).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
org.herbal3d.protocol.basil.Transform.prototype.matrix = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.Transform.prototype.matrixLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float64Array}
 */
org.herbal3d.protocol.basil.Transform.prototype.matrixArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.Transform.startTransform = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} matrixOffset
 */
org.herbal3d.protocol.basil.Transform.addMatrix = function(builder, matrixOffset) {
  builder.addFieldOffset(0, matrixOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.Transform.createMatrixVector = function(builder, data) {
  builder.startVector(8, data.length, 8);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
org.herbal3d.protocol.basil.Transform.startMatrixVector = function(builder, numElems) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.Transform.endTransform = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.propertyValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.propertyValue}
 */
org.herbal3d.protocol.basil.propertyValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.propertyValue=} obj
 * @returns {org.herbal3d.protocol.basil.propertyValue}
 */
org.herbal3d.protocol.basil.propertyValue.getRootAspropertyValue = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.propertyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
org.herbal3d.protocol.basil.propertyValue.prototype.property = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
org.herbal3d.protocol.basil.propertyValue.prototype.value = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.propertyValue.startpropertyValue = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} propertyOffset
 */
org.herbal3d.protocol.basil.propertyValue.addProperty = function(builder, propertyOffset) {
  builder.addFieldOffset(0, propertyOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
org.herbal3d.protocol.basil.propertyValue.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(1, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.propertyValue.endpropertyValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.BasilException = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.BasilException}
 */
org.herbal3d.protocol.basil.BasilException.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.BasilException=} obj
 * @returns {org.herbal3d.protocol.basil.BasilException}
 */
org.herbal3d.protocol.basil.BasilException.getRootAsBasilException = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.BasilException).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.BasilException.prototype.reason = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {org.herbal3d.protocol.basil.propertyValue=} obj
 * @returns {org.herbal3d.protocol.basil.propertyValue}
 */
org.herbal3d.protocol.basil.BasilException.prototype.hints = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new org.herbal3d.protocol.basil.propertyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.BasilException.prototype.hintsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.BasilException.startBasilException = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} reason
 */
org.herbal3d.protocol.basil.BasilException.addReason = function(builder, reason) {
  builder.addFieldInt32(0, reason, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} hintsOffset
 */
org.herbal3d.protocol.basil.BasilException.addHints = function(builder, hintsOffset) {
  builder.addFieldOffset(1, hintsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.BasilException.createHintsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
org.herbal3d.protocol.basil.BasilException.startHintsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.BasilException.endBasilException = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.coordPosition = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.coordPosition}
 */
org.herbal3d.protocol.basil.coordPosition.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.coordPosition=} obj
 * @returns {org.herbal3d.protocol.basil.coordPosition}
 */
org.herbal3d.protocol.basil.coordPosition.getRootAscoordPosition = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.coordPosition).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {org.herbal3d.protocol.basil.Vector3=} obj
 * @returns {org.herbal3d.protocol.basil.Vector3}
 */
org.herbal3d.protocol.basil.coordPosition.prototype.pos = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new org.herbal3d.protocol.basil.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {org.herbal3d.protocol.basil.Quaternion=} obj
 * @returns {org.herbal3d.protocol.basil.Quaternion}
 */
org.herbal3d.protocol.basil.coordPosition.prototype.rot = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new org.herbal3d.protocol.basil.Quaternion).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.coordPosition.prototype.posRef = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.coordPosition.prototype.rotRef = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.coordPosition.startcoordPosition = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} posOffset
 */
org.herbal3d.protocol.basil.coordPosition.addPos = function(builder, posOffset) {
  builder.addFieldStruct(0, posOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} rotOffset
 */
org.herbal3d.protocol.basil.coordPosition.addRot = function(builder, rotOffset) {
  builder.addFieldStruct(1, rotOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} posRef
 */
org.herbal3d.protocol.basil.coordPosition.addPosRef = function(builder, posRef) {
  builder.addFieldInt8(2, posRef, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} rotRef
 */
org.herbal3d.protocol.basil.coordPosition.addRotRef = function(builder, rotRef) {
  builder.addFieldInt8(3, rotRef, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.coordPosition.endcoordPosition = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.aaBoundingBox = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.aaBoundingBox}
 */
org.herbal3d.protocol.basil.aaBoundingBox.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {org.herbal3d.protocol.basil.Vector3=} obj
 * @returns {org.herbal3d.protocol.basil.Vector3}
 */
org.herbal3d.protocol.basil.aaBoundingBox.prototype.upperFrontLeft = function(obj) {
  return (obj || new org.herbal3d.protocol.basil.Vector3).__init(this.bb_pos, this.bb);
};

/**
 * @param {org.herbal3d.protocol.basil.Vector3=} obj
 * @returns {org.herbal3d.protocol.basil.Vector3}
 */
org.herbal3d.protocol.basil.aaBoundingBox.prototype.lowerBackRight = function(obj) {
  return (obj || new org.herbal3d.protocol.basil.Vector3).__init(this.bb_pos + 24, this.bb);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} upperFrontLeft_X
 * @param {number} upperFrontLeft_Y
 * @param {number} upperFrontLeft_Z
 * @param {number} lowerBackRight_X
 * @param {number} lowerBackRight_Y
 * @param {number} lowerBackRight_Z
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.aaBoundingBox.createaaBoundingBox = function(builder, upperFrontLeft_X, upperFrontLeft_Y, upperFrontLeft_Z, lowerBackRight_X, lowerBackRight_Y, lowerBackRight_Z) {
  builder.prep(8, 48);
  builder.prep(8, 24);
  builder.writeFloat64(lowerBackRight_Z);
  builder.writeFloat64(lowerBackRight_Y);
  builder.writeFloat64(lowerBackRight_X);
  builder.prep(8, 24);
  builder.writeFloat64(upperFrontLeft_Z);
  builder.writeFloat64(upperFrontLeft_Y);
  builder.writeFloat64(upperFrontLeft_X);
  return builder.offset();
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.objectDisplayInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.objectDisplayInfo}
 */
org.herbal3d.protocol.basil.objectDisplayInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.objectDisplayInfo=} obj
 * @returns {org.herbal3d.protocol.basil.objectDisplayInfo}
 */
org.herbal3d.protocol.basil.objectDisplayInfo.getRootAsobjectDisplayInfo = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.objectDisplayInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {org.herbal3d.protocol.basil.aaBoundingBox=} obj
 * @returns {org.herbal3d.protocol.basil.aaBoundingBox}
 */
org.herbal3d.protocol.basil.objectDisplayInfo.prototype.aabb = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new org.herbal3d.protocol.basil.aaBoundingBox).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.objectDisplayInfo.startobjectDisplayInfo = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} aabbOffset
 */
org.herbal3d.protocol.basil.objectDisplayInfo.addAabb = function(builder, aabbOffset) {
  builder.addFieldStruct(0, aabbOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.objectDisplayInfo.endobjectDisplayInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.assetInformation = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.assetInformation}
 */
org.herbal3d.protocol.basil.assetInformation.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.assetInformation=} obj
 * @returns {org.herbal3d.protocol.basil.assetInformation}
 */
org.herbal3d.protocol.basil.assetInformation.getRootAsassetInformation = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.assetInformation).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.assetInformation.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {org.herbal3d.protocol.basil.objectDisplayInfo=} obj
 * @returns {org.herbal3d.protocol.basil.objectDisplayInfo}
 */
org.herbal3d.protocol.basil.assetInformation.prototype.displayInfo = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new org.herbal3d.protocol.basil.objectDisplayInfo).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.assetInformation.startassetInformation = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
org.herbal3d.protocol.basil.assetInformation.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} displayInfoOffset
 */
org.herbal3d.protocol.basil.assetInformation.addDisplayInfo = function(builder, displayInfoOffset) {
  builder.addFieldOffset(1, displayInfoOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.assetInformation.endassetInformation = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.pathDescription = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.pathDescription}
 */
org.herbal3d.protocol.basil.pathDescription.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.pathDescription=} obj
 * @returns {org.herbal3d.protocol.basil.pathDescription}
 */
org.herbal3d.protocol.basil.pathDescription.getRootAspathDescription = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.pathDescription).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
org.herbal3d.protocol.basil.pathDescription.prototype.pathType = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.pathDescription.startpathDescription = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pathTypeOffset
 */
org.herbal3d.protocol.basil.pathDescription.addPathType = function(builder, pathTypeOffset) {
  builder.addFieldOffset(0, pathTypeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.pathDescription.endpathDescription = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.instancePositionInfo = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.instancePositionInfo}
 */
org.herbal3d.protocol.basil.instancePositionInfo.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.instancePositionInfo=} obj
 * @returns {org.herbal3d.protocol.basil.instancePositionInfo}
 */
org.herbal3d.protocol.basil.instancePositionInfo.getRootAsinstancePositionInfo = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.instancePositionInfo).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.instancePositionInfo.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {org.herbal3d.protocol.basil.coordPosition=} obj
 * @returns {org.herbal3d.protocol.basil.coordPosition}
 */
org.herbal3d.protocol.basil.instancePositionInfo.prototype.pos = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new org.herbal3d.protocol.basil.coordPosition).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {org.herbal3d.protocol.basil.Vector3=} obj
 * @returns {org.herbal3d.protocol.basil.Vector3}
 */
org.herbal3d.protocol.basil.instancePositionInfo.prototype.vel = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new org.herbal3d.protocol.basil.Vector3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {org.herbal3d.protocol.basil.pathDescription=} obj
 * @returns {org.herbal3d.protocol.basil.pathDescription}
 */
org.herbal3d.protocol.basil.instancePositionInfo.prototype.path = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new org.herbal3d.protocol.basil.pathDescription).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.instancePositionInfo.startinstancePositionInfo = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
org.herbal3d.protocol.basil.instancePositionInfo.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} posOffset
 */
org.herbal3d.protocol.basil.instancePositionInfo.addPos = function(builder, posOffset) {
  builder.addFieldOffset(1, posOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velOffset
 */
org.herbal3d.protocol.basil.instancePositionInfo.addVel = function(builder, velOffset) {
  builder.addFieldStruct(2, velOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pathOffset
 */
org.herbal3d.protocol.basil.instancePositionInfo.addPath = function(builder, pathOffset) {
  builder.addFieldOffset(3, pathOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.instancePositionInfo.endinstancePositionInfo = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.accessAuthorization = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.accessAuthorization}
 */
org.herbal3d.protocol.basil.accessAuthorization.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.accessAuthorization=} obj
 * @returns {org.herbal3d.protocol.basil.accessAuthorization}
 */
org.herbal3d.protocol.basil.accessAuthorization.getRootAsaccessAuthorization = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.accessAuthorization).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {org.herbal3d.protocol.basil.propertyValue=} obj
 * @returns {org.herbal3d.protocol.basil.propertyValue}
 */
org.herbal3d.protocol.basil.accessAuthorization.prototype.accessProperties = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new org.herbal3d.protocol.basil.propertyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.accessAuthorization.prototype.accessPropertiesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.accessAuthorization.startaccessAuthorization = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} accessPropertiesOffset
 */
org.herbal3d.protocol.basil.accessAuthorization.addAccessProperties = function(builder, accessPropertiesOffset) {
  builder.addFieldOffset(0, accessPropertiesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.accessAuthorization.createAccessPropertiesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
org.herbal3d.protocol.basil.accessAuthorization.startAccessPropertiesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.accessAuthorization.endaccessAuthorization = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for Node.js and RequireJS
this.org = org;
