// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var org = org || {};

/**
 * @const
 * @namespace
 */
org.herbal3d = org.herbal3d || {};

/**
 * @const
 * @namespace
 */
org.herbal3d.protocol = org.herbal3d.protocol || {};

/**
 * @const
 * @namespace
 */
org.herbal3d.protocol.basil = org.herbal3d.protocol.basil || {};

/**
 * @const
 * @namespace
 */
org.herbal3d.protocol.basil.server = org.herbal3d.protocol.basil.server || {};

/**
 * @enum
 */
org.herbal3d.protocol.basil.BFlowMsgMsg = {
  NONE: 0,
  server_AddEntity: 1,
  server_RemoveEntity: 2,
  server_AddInstance: 3,
  server_RemoveInstance: 4,
  server_GetUniqueInstanceId: 5,
  server_GetUniqueInstanceIdResponse: 6,
  server_UpdateEntityProperty: 7,
  server_UpdateInstanceProperty: 8,
  server_UpdateInstancePosition: 9,
  server_EntityPropertyRequest: 10,
  server_EntityPropertyResponse: 11,
  server_InstancePropertyRequest: 12,
  server_InstancePropertyResponse: 13,
  server_OpenSession: 14,
  server_OpenSessionResponse: 15,
  server_CloseSession: 16,
  server_AliveCheck: 17,
  server_AliveResponse: 18
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.BFlowSeqStruct = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.BFlowSeqStruct}
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.BFlowSeqStruct=} obj
 * @returns {org.herbal3d.protocol.basil.BFlowSeqStruct}
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.getRootAsBFlowSeqStruct = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.BFlowSeqStruct).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.prototype.sequenceNum = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.prototype.stream = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {flatbuffers.Long}
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.prototype.queueTime = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {flatbuffers.Long}
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.prototype.sendTime = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.startBFlowSeqStruct = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sequenceNum
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.addSequenceNum = function(builder, sequenceNum) {
  builder.addFieldInt32(0, sequenceNum, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} stream
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.addStream = function(builder, stream) {
  builder.addFieldInt32(1, stream, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} queueTime
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.addQueueTime = function(builder, queueTime) {
  builder.addFieldInt64(2, queueTime, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} sendTime
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.addSendTime = function(builder, sendTime) {
  builder.addFieldInt64(3, sendTime, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.BFlowSeqStruct.endBFlowSeqStruct = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.BFlowRequestStruct = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.BFlowRequestStruct}
 */
org.herbal3d.protocol.basil.BFlowRequestStruct.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.BFlowRequestStruct=} obj
 * @returns {org.herbal3d.protocol.basil.BFlowRequestStruct}
 */
org.herbal3d.protocol.basil.BFlowRequestStruct.getRootAsBFlowRequestStruct = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.BFlowRequestStruct).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
org.herbal3d.protocol.basil.BFlowRequestStruct.prototype.session = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
org.herbal3d.protocol.basil.BFlowRequestStruct.prototype.sessionKey = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.BFlowRequestStruct.startBFlowRequestStruct = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} session
 */
org.herbal3d.protocol.basil.BFlowRequestStruct.addSession = function(builder, session) {
  builder.addFieldInt32(0, session, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} sessionKeyOffset
 */
org.herbal3d.protocol.basil.BFlowRequestStruct.addSessionKey = function(builder, sessionKeyOffset) {
  builder.addFieldOffset(1, sessionKeyOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.BFlowRequestStruct.endBFlowRequestStruct = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.BFlowTraceStruct = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.BFlowTraceStruct}
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.BFlowTraceStruct=} obj
 * @returns {org.herbal3d.protocol.basil.BFlowTraceStruct}
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.getRootAsBFlowTraceStruct = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.BFlowTraceStruct).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.prototype.traceID = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {flatbuffers.Long}
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.prototype.parentSpanID = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {flatbuffers.Long}
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.prototype.spanID = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {boolean}
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.prototype.sampled = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.startBFlowTraceStruct = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} traceID
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.addTraceID = function(builder, traceID) {
  builder.addFieldInt64(0, traceID, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} parentSpanID
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.addParentSpanID = function(builder, parentSpanID) {
  builder.addFieldInt64(1, parentSpanID, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} spanID
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.addSpanID = function(builder, spanID) {
  builder.addFieldInt64(2, spanID, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} sampled
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.addSampled = function(builder, sampled) {
  builder.addFieldInt8(3, +sampled, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.BFlowTraceStruct.endBFlowTraceStruct = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.herbal3d.protocol.basil.FlowMsg = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.herbal3d.protocol.basil.FlowMsg}
 */
org.herbal3d.protocol.basil.FlowMsg.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.herbal3d.protocol.basil.FlowMsg=} obj
 * @returns {org.herbal3d.protocol.basil.FlowMsg}
 */
org.herbal3d.protocol.basil.FlowMsg.getRootAsFlowMsg = function(bb, obj) {
  return (obj || new org.herbal3d.protocol.basil.FlowMsg).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {org.herbal3d.protocol.basil.BFlowSeqStruct=} obj
 * @returns {org.herbal3d.protocol.basil.BFlowSeqStruct}
 */
org.herbal3d.protocol.basil.FlowMsg.prototype.seq = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new org.herbal3d.protocol.basil.BFlowSeqStruct).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {org.herbal3d.protocol.basil.BFlowRequestStruct=} obj
 * @returns {org.herbal3d.protocol.basil.BFlowRequestStruct}
 */
org.herbal3d.protocol.basil.FlowMsg.prototype.responseRequested = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new org.herbal3d.protocol.basil.BFlowRequestStruct).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {org.herbal3d.protocol.basil.accessAuthorization=} obj
 * @returns {org.herbal3d.protocol.basil.accessAuthorization}
 */
org.herbal3d.protocol.basil.FlowMsg.prototype.auth = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new org.herbal3d.protocol.basil.accessAuthorization).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {org.herbal3d.protocol.basil.BFlowTraceStruct=} obj
 * @returns {org.herbal3d.protocol.basil.BFlowTraceStruct}
 */
org.herbal3d.protocol.basil.FlowMsg.prototype.trace = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new org.herbal3d.protocol.basil.BFlowTraceStruct).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {org.herbal3d.protocol.basil.BFlowMsgMsg}
 */
org.herbal3d.protocol.basil.FlowMsg.prototype.msgType = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? /** @type {org.herbal3d.protocol.basil.BFlowMsgMsg} */ (this.bb.readUint8(this.bb_pos + offset)) : org.herbal3d.protocol.basil.BFlowMsgMsg.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
org.herbal3d.protocol.basil.FlowMsg.prototype.msg = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.herbal3d.protocol.basil.FlowMsg.startFlowMsg = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} seqOffset
 */
org.herbal3d.protocol.basil.FlowMsg.addSeq = function(builder, seqOffset) {
  builder.addFieldOffset(0, seqOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} responseRequestedOffset
 */
org.herbal3d.protocol.basil.FlowMsg.addResponseRequested = function(builder, responseRequestedOffset) {
  builder.addFieldOffset(1, responseRequestedOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} authOffset
 */
org.herbal3d.protocol.basil.FlowMsg.addAuth = function(builder, authOffset) {
  builder.addFieldOffset(2, authOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} traceOffset
 */
org.herbal3d.protocol.basil.FlowMsg.addTrace = function(builder, traceOffset) {
  builder.addFieldOffset(3, traceOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {org.herbal3d.protocol.basil.BFlowMsgMsg} msgType
 */
org.herbal3d.protocol.basil.FlowMsg.addMsgType = function(builder, msgType) {
  builder.addFieldInt8(4, msgType, org.herbal3d.protocol.basil.BFlowMsgMsg.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} msgOffset
 */
org.herbal3d.protocol.basil.FlowMsg.addMsg = function(builder, msgOffset) {
  builder.addFieldOffset(5, msgOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.herbal3d.protocol.basil.FlowMsg.endFlowMsg = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for Node.js and RequireJS
this.org = org;
