//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

BasilServer_IdentifyDisplayableObject_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.id = null;
  this.assetInfo = null;
  this.aabb = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.assetInfo !== undefined && args.assetInfo !== null) {
      this.assetInfo = new assetInformation(args.assetInfo);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assetInfo is unset!');
    }
    if (args.aabb !== undefined && args.aabb !== null) {
      this.aabb = new aaBoundingBox(args.aabb);
    }
  }
};
BasilServer_IdentifyDisplayableObject_args.prototype = {};
BasilServer_IdentifyDisplayableObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.assetInfo = new assetInformation();
        this.assetInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.aabb = new aaBoundingBox();
        this.aabb.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_IdentifyDisplayableObject_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_IdentifyDisplayableObject_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.assetInfo !== null && this.assetInfo !== undefined) {
    output.writeFieldBegin('assetInfo', Thrift.Type.STRUCT, 4);
    this.assetInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.aabb !== null && this.aabb !== undefined) {
    output.writeFieldBegin('aabb', Thrift.Type.STRUCT, 5);
    this.aabb.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_IdentifyDisplayableObject_result = function(args) {
  this.e = null;
  if (args instanceof BasilException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BasilServer_IdentifyDisplayableObject_result.prototype = {};
BasilServer_IdentifyDisplayableObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new BasilException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_IdentifyDisplayableObject_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_IdentifyDisplayableObject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 99);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_CreateObjectInstance_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.id = null;
  this.pos = null;
  this.propertiesToSet = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.pos !== undefined && args.pos !== null) {
      this.pos = new instancePositionInfo(args.pos);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pos is unset!');
    }
    if (args.propertiesToSet !== undefined && args.propertiesToSet !== null) {
      this.propertiesToSet = Thrift.copyMap(args.propertiesToSet, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field propertiesToSet is unset!');
    }
  }
};
BasilServer_CreateObjectInstance_args.prototype = {};
BasilServer_CreateObjectInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pos = new instancePositionInfo();
        this.pos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.propertiesToSet = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.propertiesToSet[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_CreateObjectInstance_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_CreateObjectInstance_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.pos !== null && this.pos !== undefined) {
    output.writeFieldBegin('pos', Thrift.Type.STRUCT, 4);
    this.pos.write(output);
    output.writeFieldEnd();
  }
  if (this.propertiesToSet !== null && this.propertiesToSet !== undefined) {
    output.writeFieldBegin('propertiesToSet', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.propertiesToSet));
    for (var kiter8 in this.propertiesToSet)
    {
      if (this.propertiesToSet.hasOwnProperty(kiter8))
      {
        var viter9 = this.propertiesToSet[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_CreateObjectInstance_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof BasilException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BasilServer_CreateObjectInstance_result.prototype = {};
BasilServer_CreateObjectInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new BasilException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_CreateObjectInstance_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_CreateObjectInstance_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 99);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_UpdateObjectProperty_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.objectId = null;
  this.props = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.objectId !== undefined && args.objectId !== null) {
      this.objectId = args.objectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field objectId is unset!');
    }
    if (args.props !== undefined && args.props !== null) {
      this.props = Thrift.copyMap(args.props, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field props is unset!');
    }
  }
};
BasilServer_UpdateObjectProperty_args.prototype = {};
BasilServer_UpdateObjectProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.objectId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.props = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          if (_i15 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key16 = null;
          var val17 = null;
          key16 = input.readString().value;
          val17 = input.readString().value;
          this.props[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_UpdateObjectProperty_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_UpdateObjectProperty_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.objectId !== null && this.objectId !== undefined) {
    output.writeFieldBegin('objectId', Thrift.Type.STRING, 3);
    output.writeString(this.objectId);
    output.writeFieldEnd();
  }
  if (this.props !== null && this.props !== undefined) {
    output.writeFieldBegin('props', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.props));
    for (var kiter18 in this.props)
    {
      if (this.props.hasOwnProperty(kiter18))
      {
        var viter19 = this.props[kiter18];
        output.writeString(kiter18);
        output.writeString(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_UpdateObjectProperty_result = function(args) {
  this.e = null;
  if (args instanceof BasilException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BasilServer_UpdateObjectProperty_result.prototype = {};
BasilServer_UpdateObjectProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new BasilException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_UpdateObjectProperty_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_UpdateObjectProperty_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 99);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_UpdateInstanceProperty_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.instanceId = null;
  this.props = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field instanceId is unset!');
    }
    if (args.props !== undefined && args.props !== null) {
      this.props = Thrift.copyMap(args.props, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field props is unset!');
    }
  }
};
BasilServer_UpdateInstanceProperty_args.prototype = {};
BasilServer_UpdateInstanceProperty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.instanceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size20 = 0;
        var _rtmp324;
        this.props = {};
        var _ktype21 = 0;
        var _vtype22 = 0;
        _rtmp324 = input.readMapBegin();
        _ktype21 = _rtmp324.ktype;
        _vtype22 = _rtmp324.vtype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          if (_i25 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key26 = null;
          var val27 = null;
          key26 = input.readString().value;
          val27 = input.readString().value;
          this.props[key26] = val27;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_UpdateInstanceProperty_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_UpdateInstanceProperty_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.I32, 3);
    output.writeI32(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.props !== null && this.props !== undefined) {
    output.writeFieldBegin('props', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.props));
    for (var kiter28 in this.props)
    {
      if (this.props.hasOwnProperty(kiter28))
      {
        var viter29 = this.props[kiter28];
        output.writeString(kiter28);
        output.writeString(viter29);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_UpdateInstanceProperty_result = function(args) {
  this.e = null;
  if (args instanceof BasilException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BasilServer_UpdateInstanceProperty_result.prototype = {};
BasilServer_UpdateInstanceProperty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new BasilException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_UpdateInstanceProperty_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_UpdateInstanceProperty_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 99);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_UpdateInstancePosition_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.instanceId = null;
  this.pos = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field instanceId is unset!');
    }
    if (args.pos !== undefined && args.pos !== null) {
      this.pos = new instancePositionInfo(args.pos);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pos is unset!');
    }
  }
};
BasilServer_UpdateInstancePosition_args.prototype = {};
BasilServer_UpdateInstancePosition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.instanceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pos = new instancePositionInfo();
        this.pos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_UpdateInstancePosition_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_UpdateInstancePosition_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.I32, 3);
    output.writeI32(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.pos !== null && this.pos !== undefined) {
    output.writeFieldBegin('pos', Thrift.Type.STRUCT, 4);
    this.pos.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_UpdateInstancePosition_result = function(args) {
  this.e = null;
  if (args instanceof BasilException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BasilServer_UpdateInstancePosition_result.prototype = {};
BasilServer_UpdateInstancePosition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new BasilException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_UpdateInstancePosition_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_UpdateInstancePosition_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 99);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_RequestObjectProperties_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.sequenceNumber = null;
  this.objectId = null;
  this.propertyMatch = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.sequenceNumber !== undefined && args.sequenceNumber !== null) {
      this.sequenceNumber = args.sequenceNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sequenceNumber is unset!');
    }
    if (args.objectId !== undefined && args.objectId !== null) {
      this.objectId = args.objectId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field objectId is unset!');
    }
    if (args.propertyMatch !== undefined && args.propertyMatch !== null) {
      this.propertyMatch = args.propertyMatch;
    }
  }
};
BasilServer_RequestObjectProperties_args.prototype = {};
BasilServer_RequestObjectProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sequenceNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.objectId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.propertyMatch = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_RequestObjectProperties_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_RequestObjectProperties_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.sequenceNumber !== null && this.sequenceNumber !== undefined) {
    output.writeFieldBegin('sequenceNumber', Thrift.Type.I32, 3);
    output.writeI32(this.sequenceNumber);
    output.writeFieldEnd();
  }
  if (this.objectId !== null && this.objectId !== undefined) {
    output.writeFieldBegin('objectId', Thrift.Type.STRING, 4);
    output.writeString(this.objectId);
    output.writeFieldEnd();
  }
  if (this.propertyMatch !== null && this.propertyMatch !== undefined) {
    output.writeFieldBegin('propertyMatch', Thrift.Type.STRING, 5);
    output.writeString(this.propertyMatch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_RequestObjectProperties_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof BasilException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BasilServer_RequestObjectProperties_result.prototype = {};
BasilServer_RequestObjectProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size30 = 0;
        var _rtmp334;
        this.success = {};
        var _ktype31 = 0;
        var _vtype32 = 0;
        _rtmp334 = input.readMapBegin();
        _ktype31 = _rtmp334.ktype;
        _vtype32 = _rtmp334.vtype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          if (_i35 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key36 = null;
          var val37 = null;
          key36 = input.readString().value;
          val37 = input.readString().value;
          this.success[key36] = val37;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new BasilException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_RequestObjectProperties_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_RequestObjectProperties_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter38 in this.success)
    {
      if (this.success.hasOwnProperty(kiter38))
      {
        var viter39 = this.success[kiter38];
        output.writeString(kiter38);
        output.writeString(viter39);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 99);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_RequestInstanceProperties_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.sequenceNumber = null;
  this.instanceId = null;
  this.propertyMatch = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.sequenceNumber !== undefined && args.sequenceNumber !== null) {
      this.sequenceNumber = args.sequenceNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sequenceNumber is unset!');
    }
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field instanceId is unset!');
    }
    if (args.propertyMatch !== undefined && args.propertyMatch !== null) {
      this.propertyMatch = args.propertyMatch;
    }
  }
};
BasilServer_RequestInstanceProperties_args.prototype = {};
BasilServer_RequestInstanceProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sequenceNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.instanceId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.propertyMatch = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_RequestInstanceProperties_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_RequestInstanceProperties_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.sequenceNumber !== null && this.sequenceNumber !== undefined) {
    output.writeFieldBegin('sequenceNumber', Thrift.Type.I32, 3);
    output.writeI32(this.sequenceNumber);
    output.writeFieldEnd();
  }
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.I32, 4);
    output.writeI32(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.propertyMatch !== null && this.propertyMatch !== undefined) {
    output.writeFieldBegin('propertyMatch', Thrift.Type.STRING, 5);
    output.writeString(this.propertyMatch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_RequestInstanceProperties_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof BasilException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BasilServer_RequestInstanceProperties_result.prototype = {};
BasilServer_RequestInstanceProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size40 = 0;
        var _rtmp344;
        this.success = {};
        var _ktype41 = 0;
        var _vtype42 = 0;
        _rtmp344 = input.readMapBegin();
        _ktype41 = _rtmp344.ktype;
        _vtype42 = _rtmp344.vtype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          if (_i45 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key46 = null;
          var val47 = null;
          key46 = input.readString().value;
          val47 = input.readString().value;
          this.success[key46] = val47;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new BasilException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_RequestInstanceProperties_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_RequestInstanceProperties_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter48 in this.success)
    {
      if (this.success.hasOwnProperty(kiter48))
      {
        var viter49 = this.success[kiter48];
        output.writeString(kiter48);
        output.writeString(viter49);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 99);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_OpenSession_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.time = null;
  this.sequenceNumber = null;
  this.features = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time is unset!');
    }
    if (args.sequenceNumber !== undefined && args.sequenceNumber !== null) {
      this.sequenceNumber = args.sequenceNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sequenceNumber is unset!');
    }
    if (args.features !== undefined && args.features !== null) {
      this.features = Thrift.copyMap(args.features, [null]);
    }
  }
};
BasilServer_OpenSession_args.prototype = {};
BasilServer_OpenSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sequenceNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size50 = 0;
        var _rtmp354;
        this.features = {};
        var _ktype51 = 0;
        var _vtype52 = 0;
        _rtmp354 = input.readMapBegin();
        _ktype51 = _rtmp354.ktype;
        _vtype52 = _rtmp354.vtype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          if (_i55 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key56 = null;
          var val57 = null;
          key56 = input.readString().value;
          val57 = input.readString().value;
          this.features[key56] = val57;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_OpenSession_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_OpenSession_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.sequenceNumber !== null && this.sequenceNumber !== undefined) {
    output.writeFieldBegin('sequenceNumber', Thrift.Type.I32, 4);
    output.writeI32(this.sequenceNumber);
    output.writeFieldEnd();
  }
  if (this.features !== null && this.features !== undefined) {
    output.writeFieldBegin('features', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.features));
    for (var kiter58 in this.features)
    {
      if (this.features.hasOwnProperty(kiter58))
      {
        var viter59 = this.features[kiter58];
        output.writeString(kiter58);
        output.writeString(viter59);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_OpenSession_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof BasilException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BasilServer_OpenSession_result.prototype = {};
BasilServer_OpenSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size60 = 0;
        var _rtmp364;
        this.success = {};
        var _ktype61 = 0;
        var _vtype62 = 0;
        _rtmp364 = input.readMapBegin();
        _ktype61 = _rtmp364.ktype;
        _vtype62 = _rtmp364.vtype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          if (_i65 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key66 = null;
          var val67 = null;
          key66 = input.readString().value;
          val67 = input.readString().value;
          this.success[key66] = val67;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new BasilException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_OpenSession_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_OpenSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter68 in this.success)
    {
      if (this.success.hasOwnProperty(kiter68))
      {
        var viter69 = this.success[kiter68];
        output.writeString(kiter68);
        output.writeString(viter69);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 99);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_CloseSession_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.time = null;
  this.sequenceNumber = null;
  this.reason = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time is unset!');
    }
    if (args.sequenceNumber !== undefined && args.sequenceNumber !== null) {
      this.sequenceNumber = args.sequenceNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sequenceNumber is unset!');
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
BasilServer_CloseSession_args.prototype = {};
BasilServer_CloseSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sequenceNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_CloseSession_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_CloseSession_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.sequenceNumber !== null && this.sequenceNumber !== undefined) {
    output.writeFieldBegin('sequenceNumber', Thrift.Type.I32, 4);
    output.writeI32(this.sequenceNumber);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 5);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_CloseSession_result = function(args) {
  this.e = null;
  if (args instanceof BasilException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
BasilServer_CloseSession_result.prototype = {};
BasilServer_CloseSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new BasilException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_CloseSession_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_CloseSession_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 99);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_AliveCheck_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.time = null;
  this.sequenceNumber = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time is unset!');
    }
    if (args.sequenceNumber !== undefined && args.sequenceNumber !== null) {
      this.sequenceNumber = args.sequenceNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sequenceNumber is unset!');
    }
  }
};
BasilServer_AliveCheck_args.prototype = {};
BasilServer_AliveCheck_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sequenceNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_AliveCheck_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_AliveCheck_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.sequenceNumber !== null && this.sequenceNumber !== undefined) {
    output.writeFieldBegin('sequenceNumber', Thrift.Type.I32, 4);
    output.writeI32(this.sequenceNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_AliveCheck_result = function(args) {
};
BasilServer_AliveCheck_result.prototype = {};
BasilServer_AliveCheck_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_AliveCheck_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_AliveCheck_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_AliveResponse_args = function(args) {
  this.auth = null;
  this.trace = null;
  this.time = null;
  this.sequenceNumber = null;
  this.timeReceived = null;
  this.sequenceNumberReceived = null;
  if (args) {
    if (args.auth !== undefined && args.auth !== null) {
      this.auth = new accessAuthorization(args.auth);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field auth is unset!');
    }
    if (args.trace !== undefined && args.trace !== null) {
      this.trace = args.trace;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time is unset!');
    }
    if (args.sequenceNumber !== undefined && args.sequenceNumber !== null) {
      this.sequenceNumber = args.sequenceNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sequenceNumber is unset!');
    }
    if (args.timeReceived !== undefined && args.timeReceived !== null) {
      this.timeReceived = args.timeReceived;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timeReceived is unset!');
    }
    if (args.sequenceNumberReceived !== undefined && args.sequenceNumberReceived !== null) {
      this.sequenceNumberReceived = args.sequenceNumberReceived;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sequenceNumberReceived is unset!');
    }
  }
};
BasilServer_AliveResponse_args.prototype = {};
BasilServer_AliveResponse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth = new accessAuthorization();
        this.auth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sequenceNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timeReceived = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.sequenceNumberReceived = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_AliveResponse_args.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_AliveResponse_args');
  if (this.auth !== null && this.auth !== undefined) {
    output.writeFieldBegin('auth', Thrift.Type.STRUCT, 1);
    this.auth.write(output);
    output.writeFieldEnd();
  }
  if (this.trace !== null && this.trace !== undefined) {
    output.writeFieldBegin('trace', Thrift.Type.STRING, 2);
    output.writeString(this.trace);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.sequenceNumber !== null && this.sequenceNumber !== undefined) {
    output.writeFieldBegin('sequenceNumber', Thrift.Type.I32, 4);
    output.writeI32(this.sequenceNumber);
    output.writeFieldEnd();
  }
  if (this.timeReceived !== null && this.timeReceived !== undefined) {
    output.writeFieldBegin('timeReceived', Thrift.Type.I64, 5);
    output.writeI64(this.timeReceived);
    output.writeFieldEnd();
  }
  if (this.sequenceNumberReceived !== null && this.sequenceNumberReceived !== undefined) {
    output.writeFieldBegin('sequenceNumberReceived', Thrift.Type.I32, 6);
    output.writeI32(this.sequenceNumberReceived);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServer_AliveResponse_result = function(args) {
};
BasilServer_AliveResponse_result.prototype = {};
BasilServer_AliveResponse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilServer_AliveResponse_result.prototype.write = function(output) {
  output.writeStructBegin('BasilServer_AliveResponse_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilServerClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
BasilServerClient.prototype = {};
BasilServerClient.prototype.IdentifyDisplayableObject = function(auth, trace, id, assetInfo, aabb, callback) {
  if (callback === undefined) {
    this.send_IdentifyDisplayableObject(auth, trace, id, assetInfo, aabb);
    this.recv_IdentifyDisplayableObject();
  } else {
    var postData = this.send_IdentifyDisplayableObject(auth, trace, id, assetInfo, aabb, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_IdentifyDisplayableObject);
  }
};

BasilServerClient.prototype.send_IdentifyDisplayableObject = function(auth, trace, id, assetInfo, aabb, callback) {
  this.output.writeMessageBegin('IdentifyDisplayableObject', Thrift.MessageType.CALL, this.seqid);
  var args = new BasilServer_IdentifyDisplayableObject_args();
  args.auth = auth;
  args.trace = trace;
  args.id = id;
  args.assetInfo = assetInfo;
  args.aabb = aabb;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BasilServerClient.prototype.recv_IdentifyDisplayableObject = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BasilServer_IdentifyDisplayableObject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BasilServerClient.prototype.CreateObjectInstance = function(auth, trace, id, pos, propertiesToSet, callback) {
  if (callback === undefined) {
    this.send_CreateObjectInstance(auth, trace, id, pos, propertiesToSet);
    return this.recv_CreateObjectInstance();
  } else {
    var postData = this.send_CreateObjectInstance(auth, trace, id, pos, propertiesToSet, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CreateObjectInstance);
  }
};

BasilServerClient.prototype.send_CreateObjectInstance = function(auth, trace, id, pos, propertiesToSet, callback) {
  this.output.writeMessageBegin('CreateObjectInstance', Thrift.MessageType.CALL, this.seqid);
  var args = new BasilServer_CreateObjectInstance_args();
  args.auth = auth;
  args.trace = trace;
  args.id = id;
  args.pos = pos;
  args.propertiesToSet = propertiesToSet;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BasilServerClient.prototype.recv_CreateObjectInstance = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BasilServer_CreateObjectInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateObjectInstance failed: unknown result';
};
BasilServerClient.prototype.UpdateObjectProperty = function(auth, trace, objectId, props, callback) {
  if (callback === undefined) {
    this.send_UpdateObjectProperty(auth, trace, objectId, props);
    this.recv_UpdateObjectProperty();
  } else {
    var postData = this.send_UpdateObjectProperty(auth, trace, objectId, props, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_UpdateObjectProperty);
  }
};

BasilServerClient.prototype.send_UpdateObjectProperty = function(auth, trace, objectId, props, callback) {
  this.output.writeMessageBegin('UpdateObjectProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new BasilServer_UpdateObjectProperty_args();
  args.auth = auth;
  args.trace = trace;
  args.objectId = objectId;
  args.props = props;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BasilServerClient.prototype.recv_UpdateObjectProperty = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BasilServer_UpdateObjectProperty_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BasilServerClient.prototype.UpdateInstanceProperty = function(auth, trace, instanceId, props, callback) {
  if (callback === undefined) {
    this.send_UpdateInstanceProperty(auth, trace, instanceId, props);
    this.recv_UpdateInstanceProperty();
  } else {
    var postData = this.send_UpdateInstanceProperty(auth, trace, instanceId, props, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_UpdateInstanceProperty);
  }
};

BasilServerClient.prototype.send_UpdateInstanceProperty = function(auth, trace, instanceId, props, callback) {
  this.output.writeMessageBegin('UpdateInstanceProperty', Thrift.MessageType.CALL, this.seqid);
  var args = new BasilServer_UpdateInstanceProperty_args();
  args.auth = auth;
  args.trace = trace;
  args.instanceId = instanceId;
  args.props = props;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BasilServerClient.prototype.recv_UpdateInstanceProperty = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BasilServer_UpdateInstanceProperty_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BasilServerClient.prototype.UpdateInstancePosition = function(auth, trace, instanceId, pos, callback) {
  if (callback === undefined) {
    this.send_UpdateInstancePosition(auth, trace, instanceId, pos);
    this.recv_UpdateInstancePosition();
  } else {
    var postData = this.send_UpdateInstancePosition(auth, trace, instanceId, pos, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_UpdateInstancePosition);
  }
};

BasilServerClient.prototype.send_UpdateInstancePosition = function(auth, trace, instanceId, pos, callback) {
  this.output.writeMessageBegin('UpdateInstancePosition', Thrift.MessageType.CALL, this.seqid);
  var args = new BasilServer_UpdateInstancePosition_args();
  args.auth = auth;
  args.trace = trace;
  args.instanceId = instanceId;
  args.pos = pos;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BasilServerClient.prototype.recv_UpdateInstancePosition = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BasilServer_UpdateInstancePosition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BasilServerClient.prototype.RequestObjectProperties = function(auth, trace, sequenceNumber, objectId, propertyMatch, callback) {
  if (callback === undefined) {
    this.send_RequestObjectProperties(auth, trace, sequenceNumber, objectId, propertyMatch);
    return this.recv_RequestObjectProperties();
  } else {
    var postData = this.send_RequestObjectProperties(auth, trace, sequenceNumber, objectId, propertyMatch, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_RequestObjectProperties);
  }
};

BasilServerClient.prototype.send_RequestObjectProperties = function(auth, trace, sequenceNumber, objectId, propertyMatch, callback) {
  this.output.writeMessageBegin('RequestObjectProperties', Thrift.MessageType.CALL, this.seqid);
  var args = new BasilServer_RequestObjectProperties_args();
  args.auth = auth;
  args.trace = trace;
  args.sequenceNumber = sequenceNumber;
  args.objectId = objectId;
  args.propertyMatch = propertyMatch;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BasilServerClient.prototype.recv_RequestObjectProperties = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BasilServer_RequestObjectProperties_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'RequestObjectProperties failed: unknown result';
};
BasilServerClient.prototype.RequestInstanceProperties = function(auth, trace, sequenceNumber, instanceId, propertyMatch, callback) {
  if (callback === undefined) {
    this.send_RequestInstanceProperties(auth, trace, sequenceNumber, instanceId, propertyMatch);
    return this.recv_RequestInstanceProperties();
  } else {
    var postData = this.send_RequestInstanceProperties(auth, trace, sequenceNumber, instanceId, propertyMatch, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_RequestInstanceProperties);
  }
};

BasilServerClient.prototype.send_RequestInstanceProperties = function(auth, trace, sequenceNumber, instanceId, propertyMatch, callback) {
  this.output.writeMessageBegin('RequestInstanceProperties', Thrift.MessageType.CALL, this.seqid);
  var args = new BasilServer_RequestInstanceProperties_args();
  args.auth = auth;
  args.trace = trace;
  args.sequenceNumber = sequenceNumber;
  args.instanceId = instanceId;
  args.propertyMatch = propertyMatch;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BasilServerClient.prototype.recv_RequestInstanceProperties = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BasilServer_RequestInstanceProperties_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'RequestInstanceProperties failed: unknown result';
};
BasilServerClient.prototype.OpenSession = function(auth, trace, time, sequenceNumber, features, callback) {
  if (callback === undefined) {
    this.send_OpenSession(auth, trace, time, sequenceNumber, features);
    return this.recv_OpenSession();
  } else {
    var postData = this.send_OpenSession(auth, trace, time, sequenceNumber, features, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_OpenSession);
  }
};

BasilServerClient.prototype.send_OpenSession = function(auth, trace, time, sequenceNumber, features, callback) {
  this.output.writeMessageBegin('OpenSession', Thrift.MessageType.CALL, this.seqid);
  var args = new BasilServer_OpenSession_args();
  args.auth = auth;
  args.trace = trace;
  args.time = time;
  args.sequenceNumber = sequenceNumber;
  args.features = features;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BasilServerClient.prototype.recv_OpenSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BasilServer_OpenSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'OpenSession failed: unknown result';
};
BasilServerClient.prototype.CloseSession = function(auth, trace, time, sequenceNumber, reason, callback) {
  if (callback === undefined) {
    this.send_CloseSession(auth, trace, time, sequenceNumber, reason);
    this.recv_CloseSession();
  } else {
    var postData = this.send_CloseSession(auth, trace, time, sequenceNumber, reason, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_CloseSession);
  }
};

BasilServerClient.prototype.send_CloseSession = function(auth, trace, time, sequenceNumber, reason, callback) {
  this.output.writeMessageBegin('CloseSession', Thrift.MessageType.CALL, this.seqid);
  var args = new BasilServer_CloseSession_args();
  args.auth = auth;
  args.trace = trace;
  args.time = time;
  args.sequenceNumber = sequenceNumber;
  args.reason = reason;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BasilServerClient.prototype.recv_CloseSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BasilServer_CloseSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
BasilServerClient.prototype.AliveCheck = function(auth, trace, time, sequenceNumber, callback) {
  if (callback === undefined) {
    this.send_AliveCheck(auth, trace, time, sequenceNumber);
  } else {
    var postData = this.send_AliveCheck(auth, trace, time, sequenceNumber, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_AliveCheck);
  }
};

BasilServerClient.prototype.send_AliveCheck = function(auth, trace, time, sequenceNumber, callback) {
  this.output.writeMessageBegin('AliveCheck', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new BasilServer_AliveCheck_args();
  args.auth = auth;
  args.trace = trace;
  args.time = time;
  args.sequenceNumber = sequenceNumber;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
BasilServerClient.prototype.AliveResponse = function(auth, trace, time, sequenceNumber, timeReceived, sequenceNumberReceived, callback) {
  if (callback === undefined) {
    this.send_AliveResponse(auth, trace, time, sequenceNumber, timeReceived, sequenceNumberReceived);
  } else {
    var postData = this.send_AliveResponse(auth, trace, time, sequenceNumber, timeReceived, sequenceNumberReceived, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_AliveResponse);
  }
};

BasilServerClient.prototype.send_AliveResponse = function(auth, trace, time, sequenceNumber, timeReceived, sequenceNumberReceived, callback) {
  this.output.writeMessageBegin('AliveResponse', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new BasilServer_AliveResponse_args();
  args.auth = auth;
  args.trace = trace;
  args.time = time;
  args.sequenceNumber = sequenceNumber;
  args.timeReceived = timeReceived;
  args.sequenceNumberReceived = sequenceNumberReceived;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
