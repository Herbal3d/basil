//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


coordSystem = {
  'WGS86' : 1,
  'CAMERA' : 2,
  'CAMERAABS' : 3,
  'VIRTUAL' : 4,
  'MOON' : 5,
  'MARS' : 6,
  'REL1' : 7,
  'REL2' : 8,
  'REL3' : 9
};
rotationSystem = {
  'WORLD' : 1,
  'FOR' : 2,
  'CAMERA' : 3
};
Vector3 = function(args) {
  this.X = null;
  this.Y = null;
  this.Z = null;
  if (args) {
    if (args.X !== undefined && args.X !== null) {
      this.X = args.X;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field X is unset!');
    }
    if (args.Y !== undefined && args.Y !== null) {
      this.Y = args.Y;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Y is unset!');
    }
    if (args.Z !== undefined && args.Z !== null) {
      this.Z = args.Z;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Z is unset!');
    }
  }
};
Vector3.prototype = {};
Vector3.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.X = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.Y = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.Z = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vector3.prototype.write = function(output) {
  output.writeStructBegin('Vector3');
  if (this.X !== null && this.X !== undefined) {
    output.writeFieldBegin('X', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.X);
    output.writeFieldEnd();
  }
  if (this.Y !== null && this.Y !== undefined) {
    output.writeFieldBegin('Y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.Y);
    output.writeFieldEnd();
  }
  if (this.Z !== null && this.Z !== undefined) {
    output.writeFieldBegin('Z', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.Z);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Quaternion = function(args) {
  this.X = null;
  this.Y = null;
  this.Z = null;
  this.W = null;
  if (args) {
    if (args.X !== undefined && args.X !== null) {
      this.X = args.X;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field X is unset!');
    }
    if (args.Y !== undefined && args.Y !== null) {
      this.Y = args.Y;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Y is unset!');
    }
    if (args.Z !== undefined && args.Z !== null) {
      this.Z = args.Z;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Z is unset!');
    }
    if (args.W !== undefined && args.W !== null) {
      this.W = args.W;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field W is unset!');
    }
  }
};
Quaternion.prototype = {};
Quaternion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.X = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.Y = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.Z = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.W = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Quaternion.prototype.write = function(output) {
  output.writeStructBegin('Quaternion');
  if (this.X !== null && this.X !== undefined) {
    output.writeFieldBegin('X', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.X);
    output.writeFieldEnd();
  }
  if (this.Y !== null && this.Y !== undefined) {
    output.writeFieldBegin('Y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.Y);
    output.writeFieldEnd();
  }
  if (this.Z !== null && this.Z !== undefined) {
    output.writeFieldBegin('Z', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.Z);
    output.writeFieldEnd();
  }
  if (this.W !== null && this.W !== undefined) {
    output.writeFieldBegin('W', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.W);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Transform = function(args) {
  this.matrix = null;
  this.origin = null;
  if (args) {
    if (args.matrix !== undefined && args.matrix !== null) {
      this.matrix = Thrift.copyList(args.matrix, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field matrix is unset!');
    }
    if (args.origin !== undefined && args.origin !== null) {
      this.origin = new Vector3(args.origin);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field origin is unset!');
    }
  }
};
Transform.prototype = {};
Transform.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.matrix = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readDouble().value;
          this.matrix.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.origin = new Vector3();
        this.origin.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transform.prototype.write = function(output) {
  output.writeStructBegin('Transform');
  if (this.matrix !== null && this.matrix !== undefined) {
    output.writeFieldBegin('matrix', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.DOUBLE, this.matrix.length);
    for (var iter7 in this.matrix)
    {
      if (this.matrix.hasOwnProperty(iter7))
      {
        iter7 = this.matrix[iter7];
        output.writeDouble(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.origin !== null && this.origin !== undefined) {
    output.writeFieldBegin('origin', Thrift.Type.STRUCT, 2);
    this.origin.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BasilException = function(args) {
  this.reason = null;
  this.hints = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
    if (args.hints !== undefined && args.hints !== null) {
      this.hints = Thrift.copyMap(args.hints, [null]);
    }
  }
};
Thrift.inherits(BasilException, Thrift.TException);
BasilException.prototype.name = 'BasilException';
BasilException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reason = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.hints = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          val15 = input.readString().value;
          this.hints[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BasilException.prototype.write = function(output) {
  output.writeStructBegin('BasilException');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.I32, 1);
    output.writeI32(this.reason);
    output.writeFieldEnd();
  }
  if (this.hints !== null && this.hints !== undefined) {
    output.writeFieldBegin('hints', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.hints));
    for (var kiter16 in this.hints)
    {
      if (this.hints.hasOwnProperty(kiter16))
      {
        var viter17 = this.hints[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

coordPosition = function(args) {
  this.pos = null;
  this.rot = null;
  this.posRef = null;
  this.rotRef = null;
  if (args) {
    if (args.pos !== undefined && args.pos !== null) {
      this.pos = new Vector3(args.pos);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pos is unset!');
    }
    if (args.rot !== undefined && args.rot !== null) {
      this.rot = new Quaternion(args.rot);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rot is unset!');
    }
    if (args.posRef !== undefined && args.posRef !== null) {
      this.posRef = args.posRef;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field posRef is unset!');
    }
    if (args.rotRef !== undefined && args.rotRef !== null) {
      this.rotRef = args.rotRef;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rotRef is unset!');
    }
  }
};
coordPosition.prototype = {};
coordPosition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pos = new Vector3();
        this.pos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rot = new Quaternion();
        this.rot.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.posRef = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.rotRef = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

coordPosition.prototype.write = function(output) {
  output.writeStructBegin('coordPosition');
  if (this.pos !== null && this.pos !== undefined) {
    output.writeFieldBegin('pos', Thrift.Type.STRUCT, 1);
    this.pos.write(output);
    output.writeFieldEnd();
  }
  if (this.rot !== null && this.rot !== undefined) {
    output.writeFieldBegin('rot', Thrift.Type.STRUCT, 2);
    this.rot.write(output);
    output.writeFieldEnd();
  }
  if (this.posRef !== null && this.posRef !== undefined) {
    output.writeFieldBegin('posRef', Thrift.Type.BYTE, 3);
    output.writeByte(this.posRef);
    output.writeFieldEnd();
  }
  if (this.rotRef !== null && this.rotRef !== undefined) {
    output.writeFieldBegin('rotRef', Thrift.Type.BYTE, 4);
    output.writeByte(this.rotRef);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

aaBoundingBox = function(args) {
  this.upperFrontLeft = null;
  this.lowerBackRight = null;
  if (args) {
    if (args.upperFrontLeft !== undefined && args.upperFrontLeft !== null) {
      this.upperFrontLeft = new Vector3(args.upperFrontLeft);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field upperFrontLeft is unset!');
    }
    if (args.lowerBackRight !== undefined && args.lowerBackRight !== null) {
      this.lowerBackRight = new Vector3(args.lowerBackRight);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lowerBackRight is unset!');
    }
  }
};
aaBoundingBox.prototype = {};
aaBoundingBox.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.upperFrontLeft = new Vector3();
        this.upperFrontLeft.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lowerBackRight = new Vector3();
        this.lowerBackRight.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

aaBoundingBox.prototype.write = function(output) {
  output.writeStructBegin('aaBoundingBox');
  if (this.upperFrontLeft !== null && this.upperFrontLeft !== undefined) {
    output.writeFieldBegin('upperFrontLeft', Thrift.Type.STRUCT, 1);
    this.upperFrontLeft.write(output);
    output.writeFieldEnd();
  }
  if (this.lowerBackRight !== null && this.lowerBackRight !== undefined) {
    output.writeFieldBegin('lowerBackRight', Thrift.Type.STRUCT, 2);
    this.lowerBackRight.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

objectDisplayInfo = function(args) {
  this.aabb = null;
  if (args) {
    if (args.aabb !== undefined && args.aabb !== null) {
      this.aabb = new aaBoundingBox(args.aabb);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aabb is unset!');
    }
  }
};
objectDisplayInfo.prototype = {};
objectDisplayInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.aabb = new aaBoundingBox();
        this.aabb.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

objectDisplayInfo.prototype.write = function(output) {
  output.writeStructBegin('objectDisplayInfo');
  if (this.aabb !== null && this.aabb !== undefined) {
    output.writeFieldBegin('aabb', Thrift.Type.STRUCT, 1);
    this.aabb.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

assetInformation = function(args) {
  this.id = null;
  this.displayInfo = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.displayInfo !== undefined && args.displayInfo !== null) {
      this.displayInfo = new objectDisplayInfo(args.displayInfo);
    }
  }
};
assetInformation.prototype = {};
assetInformation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.displayInfo = new objectDisplayInfo();
        this.displayInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

assetInformation.prototype.write = function(output) {
  output.writeStructBegin('assetInformation');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.displayInfo !== null && this.displayInfo !== undefined) {
    output.writeFieldBegin('displayInfo', Thrift.Type.STRUCT, 2);
    this.displayInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pathDescription = function(args) {
  this.pathType = null;
  if (args) {
    if (args.pathType !== undefined && args.pathType !== null) {
      this.pathType = args.pathType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pathType is unset!');
    }
  }
};
pathDescription.prototype = {};
pathDescription.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pathType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pathDescription.prototype.write = function(output) {
  output.writeStructBegin('pathDescription');
  if (this.pathType !== null && this.pathType !== undefined) {
    output.writeFieldBegin('pathType', Thrift.Type.STRING, 1);
    output.writeString(this.pathType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

instancePositionInfo = function(args) {
  this.id = null;
  this.pos = null;
  this.vel = null;
  this.path = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.pos !== undefined && args.pos !== null) {
      this.pos = new coordPosition(args.pos);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pos is unset!');
    }
    if (args.vel !== undefined && args.vel !== null) {
      this.vel = new Vector3(args.vel);
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = new pathDescription(args.path);
    }
  }
};
instancePositionInfo.prototype = {};
instancePositionInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pos = new coordPosition();
        this.pos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.vel = new Vector3();
        this.vel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.path = new pathDescription();
        this.path.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

instancePositionInfo.prototype.write = function(output) {
  output.writeStructBegin('instancePositionInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.pos !== null && this.pos !== undefined) {
    output.writeFieldBegin('pos', Thrift.Type.STRUCT, 2);
    this.pos.write(output);
    output.writeFieldEnd();
  }
  if (this.vel !== null && this.vel !== undefined) {
    output.writeFieldBegin('vel', Thrift.Type.STRUCT, 3);
    this.vel.write(output);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRUCT, 4);
    this.path.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

accessAuthorization = function(args) {
  this.accessProperties = null;
  if (args) {
    if (args.accessProperties !== undefined && args.accessProperties !== null) {
      this.accessProperties = Thrift.copyMap(args.accessProperties, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessProperties is unset!');
    }
  }
};
accessAuthorization.prototype = {};
accessAuthorization.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.accessProperties = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          if (_i23 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key24 = null;
          var val25 = null;
          key24 = input.readString().value;
          val25 = input.readString().value;
          this.accessProperties[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

accessAuthorization.prototype.write = function(output) {
  output.writeStructBegin('accessAuthorization');
  if (this.accessProperties !== null && this.accessProperties !== undefined) {
    output.writeFieldBegin('accessProperties', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.accessProperties));
    for (var kiter26 in this.accessProperties)
    {
      if (this.accessProperties.hasOwnProperty(kiter26))
      {
        var viter27 = this.accessProperties[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

